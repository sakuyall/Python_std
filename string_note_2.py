# --7/8/25-string_note_2---------------------------------------------------
"     左侧不要留白".lstrip()        # 截取字符串,括号内默认为空白
"右侧不要留白     ".rstrip()
"  左右不要留白   ".strip()
"123print hello world321".strip("123pd lr")          # 去掉给定字符
# 表现为从左右两侧开始去除给定字符，直到出现括号以外字符，因此内部空格还在
# 去除指定整个字符串可以通过以下语句：
"123print hello world321".removeprefix("123p")
"123print hello world321".removesuffix("d321")

# 拆分字符串
a = "123print hello world321"
a.partition(" ")      # 从左往右按照给定分隔符拆分输出为三元素的 (元组)（响应快）
# 表现为“分隔符前”，“分隔符”，“分隔符后”三个元素
a.rpartition(" ")     # 从右而往左查找
# 可以采用split进行任意切分，括号输入为默认时用空格切分，转换为 [列表]（可修改）
a.split(" ",1)        # 第二个参数设置切分次数，默认为-1（全切）
a.rsplit()            # 反向

b = "123print\nhellorworld\r321\r\n"    # 这是由于不同操作系统的换行不同导致的
b.splitlines() # 按行分割输出为列表,括号内为True则带换行符一起分割，默认为False

# 拼接字符串
c = "qwe"      # 通常的合并,c输出为qweqwe
c += c
"@".join(["123print","hello","world321"])      # join写法，将其作为分隔符插入
d = "qwe"      # 用join合并（大数量级情况速度快）
d.join([d,""])

# format格式化字符串
year = 2025
"今年是{}年".format(year)             # 使用{}占位，在format参数中加入目标内容
"1+2={},2的平方是{},3的立方是{}".format(1+2,2**2,3**3)
"{1}是世界上最好的语言.{0}".format("c","java")       #在{}内加入数字可表示顺序
"{0}{1}{0}{1}".format("是","非")
# 这是由于format()中的元素会被当做元组来对待

"{name}你是做什么{job}的".format(name = "师傅",job = "工作")
# 关键字索引则不需要关注顺序

"{},{},{}".format(1,"{}",2)       # 将{}作为字符串输出
"{},{{}},{}".format(1,2)          # {}注释了{}

# 再加入对齐选项(:分隔)
"hello{0:^10}{1}".format("world","123")

# 索引:对齐方向与显示宽度,world实现了居中。<左对齐，>右对齐，^居中
"{0:>010}".format("-123")    # 在宽度前加上零会将空格部分填充为0
"{0:>010}".format(-123)       # 并且{}内容为数字时会 保留正负号
"{0:*>010}".format(-123)      # 对齐前可以加上想要填充的内容 不是数所以不保留

# 符号选项
"{:+}{:-}".format(100,-100)   # +代表整数前加正号，负数前加负号；-是默认情况
"{:,}".format(1000)           # 代表千分符
"{:.2f}".format(3.1415)       # f浮点数保留两位小数精度，精度选项不允许用于整形
"{:.2g}".format(3.1415)       # g通用格式总共数位（.2）
"{:.2}".format("hello world") # 起到限定字符数作用

# 进制输出，在字母前加#会追加进制前缀，以下是一部分输出格式
"{:b}".format(80)   # 二进制
"{:c}".format(80)   # Unicode字符
"{:d}".format(80)   # 十进制，默认值
"{:o}".format(80)   # 八进制
"{:x}".format(80)   # 十六进制
"{:X}".format(80)   # 大写x也是输出十六进制
"{:%}".format(80)   # 百分比
"{:e}".format(80)   # 科学计数法
"{:.{prec}f}".format(3.1415,prec = 2)# 通过关键字索引来设置精度

# 推广可得：
"{:{fill}{align}{width}.{prec}{type}}".format(3.1415,\
                                        fill = "+",\
                                        align = "^",\
                                        width = 10,\
                                        prec = 3,\
                                        type = "g")
# 输出为+++3.14+++

# f-string,大小写都可以，用于简化以上语法（效率高）支持python3.6及以上
fill = "+"
align = "^"
width = 10
prec = 3
type = "g"
F"{3.1415:{fill}{align}{width}.{prec}{type}}"  # 填充，布局，宽度，精度，格式
# 输出为+++3.14+++